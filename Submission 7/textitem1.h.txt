//textitem1.h
//LastName:FirstName:A00123456:csc34101
//Submission 07
//Implementing the Student::TextItem Class, Part 1

/**
This namespace contains only the <code>%TextItem</code> class, and
can be used to distinguish that class from any other class with the
same name, either in the global namespace or in another namespace.
*/

#ifndef TEXTITEM1_H
#define TEXTITEM1_H

namespace Student
/**
Contains just the single class <code>%TextItem</code>, and this version
of that class contains only two constructors and a friend function that
overloads the \<\< operator for displaying the text item. In particular,
even though it uses dynamic memory, it does not have the "Big Three":
destructor, copy constructor, and overloaded assignment operator. Those
will come in Part 2.
*/
{
class TextItem
    /**
    For displaying an on-line help (or other) text message in console 
    applications. The <code>%TextItem</code> class provides a convenient
    mechanism for holding, in memory, any "text item" and displaying it
    whenever required by a program. A "text item" consists of one or more
    lines of text and is loaded into memory from a textfile, which must
    have the format specified below.
    \n\n One obvious use for this class would be for handling on-line
    help, but any text item, consisting of any number of lines, that
    needs to be displayed one or more times by a program may be considered
    a candiate to become a "text item".
    \n\n Any textfile containing a text item must be formatted
    according to the following rules:
    -# All lines of text from the beginning of the file down to the first
    line consisting of 40 equal signs will be ignored. Thus one or more
    lines that serve to identify file content to a human reader of the
    file may be placed before this line. Such a line of 40 equal signs
    must be left-justified, but is not displayed in the output. A 
    left-justified line of 40 equal signs looks like this:
<pre>
========================================
</pre>
    -# Subsequent lines form the body of the text item. The body of a text
    item may also contain one or more lines consisting of exactly 40
    exclamation marks (!) among the lines of "regular" text. Such a line
    indicates a point where the display must pause and ask the user to
    press Enter to continue, but the line itself is not displayed. Such
    a line of 40 exclamation marks must be left-justified. A left-justified
    line of 40 exclamation marks looks like this:
<pre>
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
</pre>
    -# The text item is terminated by a second line of 40 equal signs like
    that described above. This line is not displayed, and any text following
    this line in the file will also be ignored. It may thus be inferred that
    a valid text item file will normally contain exactly two left-justified
    lines consisting of 40 equal signs, with some lines of text (and possibly
    some lines consisting of 40 exclamation marks) in between them, and there
    may (or may not) be text before the first one, and after the second one,
    with all such text being ingored when the file is read.
    -#  Keep all lines in a text item strictly less than 80 characters in
    length. In the first place, any line longer than this will likely wrap
    to a second line during the display, and may not break where you'd like
    it to. Second, some systems (DOS/Windows, for example) seem to put an
    automatic line feed at the end of each line of exactly 80 characters when
    displaying such a line. So, keeping lines under 80 characters in length
    will avoid wrapped lines and/or extraneous blank lines in the output
    that might be introduced in this way.
    */
{
    friend ostream& operator<<
        (
        ostream& outStream,  //inout
        const TextItem& item //in
        );
    /**<
    Displays item on the standard output.
    @return <tt>outStream</tt>, the stream on which <tt>item</tt> is displayed.
    @param outStream The stream on which <tt>item</tt> is displayed.
    @param item The <code>%TextItem</code> object to display.
    @pre The object has been initialized.
    @post The text item has been displayed, with pauses at each location where
    a left-justified line of 40 exclamation marks (!) appears in the text item
    file.
    */

public:
    TextItem();
    /**< 
    Default constructor.
    @pre None.
    @post The object has been created, but contains no lines. However,
    the program then displays the following 6-line message and terminates
    when the user presses Enter:
<pre>
Error:
A file name must be supplied when declaring a <code>%TextItem</code> object.
Example of a proper declaration:
%TextItem myTextItems("my_text_item_file.dat");
Program is now terminating.
Press Enter to continue ...
</pre>
    */

    TextItem
        (
        const std::string& fileName //in
        //std:: required to avoid doxygen warning, for some reason ...

        );
    /**<
    Constructor which gets its text item from a textfile.
    @param fileName The name of the text item file to be used to
    create the <code>%TextItem</code> object.
    @pre <code>fileName</code> has been initialized.
    @post Case 1 (typical): If <code>fileName</code> contains the name
    (or the full pathname) of a properly-formatted text item file, the
    text item in that file has been read into memory and the constructed
    object contains this text item.
    \n\n Case 2 (empty-file error): If <em>fileName</em> contains the
    name of an empty file, the program displays this 3-line message:
<pre>
Error: Input text item file is empty.
Program is now terminating.
Press Enter to continue ...
</pre>
    Case 3 (non-existent-file error): If <code>fileName</code> contains the
    name of a file that doesn't exist, the program will give the user one
    opportunity to rectify the situation by entering, from the standard
    input, the name of a valid text item file of (or the name and path
    to the file if it's not in the working directory). In this case the
    user is prompted with the following message:
<pre>
Error: Cannot find file name_of_missing_file.
Please enter name (and path, if necessary) of the
appropriate text item file, if you know it.
Otherwise, just press Enter to terminate:
</pre>
    If the user then fails to provide a valid file name, or simply presses
    Enter, the program displays this 3-line message:
<pre>
Error: Input file of text items does not exist.
Program is now terminating.
Press Enter to continue ...
</pre>
    The program thus terminates if a validly-named file is empty, or
    if the name of a valid file is not supplied, either initially, or
    during the one additional permitted attempt.
    */

private:
    struct LineNode
    {
        string lineText;
        LineNode* next;
    };
    LineNode* firstLinePtr;
};

} //End of the specification part of namespace Student

#endif
